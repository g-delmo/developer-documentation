openapi: 3.1.0
info:
  title: Whop Apps API
  description: The Whop Apps API
  version: v5
servers:
  - url: https://api.whop.com/api
paths:
  "/v5/oauth/token":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - oauth
      operationId: post_api_v5_oauth_token
      summary: Create an OAuth Token
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OauthToken"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OauthTokenCreateBody"
      description: Exchange a code for a token
  "/v5/app":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app
      operationId: get_api_v5_app
      summary: Retrieve the current app
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppApp"
        "403":
          $ref: "#/components/responses/Forbidden"
      description: Returns an App
  "/v5/app/billing_usages":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/billing_usages
      operationId: post_api_v5_app_billing_usages
      summary: Create a Billing Usage
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppBillingUsage"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppBillingUsageCreateBody"
      description: Create a billing usage for a company
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/billing_usages
      operationId: get_api_v5_app_billing_usages
      summary: List Billing Usages
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: membership_id
          in: query
          required: false
          description: An ID of a membership to filter by, which will look like mem_*************
          schema:
            type: string
        - name: billing_item_id
          in: query
          required: false
          description: An ID of a billing item to filter by, which will look like bi_*************
          schema:
            type: string
        - name: billing_item_identifier
          in: query
          required: false
          description: An identifier of a billing item to filter by.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppBillingUsage"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of billing usages
  "/v5/app/billing_usages/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/billing_usages
      operationId: get_api_v5_app_billing_usages_id
      summary: Retrieve a Billing Usage
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the billing usage, which will look like bu_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppBillingUsage"
      description: Returns a billing usage
    delete:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/billing_usages
      operationId: delete_api_v5_app_billing_usages_id
      summary: Delete a Billing Usage
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the billing usage, which will look like bu_*************
          schema:
            type: string
      responses:
        "204":
          description: A successful response
      description: Deletes a billing usage
  "/v5/app/app_connections":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/app_connections
      operationId: post_api_v5_app_app_connections
      summary: Create an App Connection
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppAppConnection"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppAppConnectionCreateBody"
      description: Create an app connection for an object
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/app_connections
      operationId: get_api_v5_app_app_connections
      summary: List App Connections
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: resource_id
          in: query
          required: false
          description: An ID of an object to filter by, which will look like prod_*************
          schema:
            type: string
        - name: resource_type
          in: query
          required: false
          description: The type of resource to filter by, ex 'product'.
          schema:
            type: string
            enum:
              - product
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppAppConnection"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of app connections
  "/v5/app/app_connections/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/app_connections
      operationId: get_api_v5_app_app_connections_id
      summary: Retrieve an app connection
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the app connection, which will look like apco_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppAppConnection"
      description: Returns an app connection
    delete:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/app_connections
      operationId: delete_api_v5_app_app_connections_id
      summary: Delete an App Connection
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the app connection, which will look like apco_*************
          schema:
            type: string
      responses:
        "204":
          description: A successful response
      description: Deletes an App Connection
  "/v5/app/companies":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/companies
      operationId: get_api_v5_app_companies
      summary: List Companies
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppCompany"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      description: Returns a collection of companies
  "/v5/app/companies/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/companies
      operationId: get_api_v5_app_companies_id
      summary: Retrieve a Company
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Company, which will look like biz_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppCompany"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a company
  "/v5/app/experiences":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/experiences
      operationId: get_api_v5_app_experiences
      summary: List Experiences
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppExperience"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
      description: Returns a collection of experiences
  "/v5/app/experiences/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/experiences
      operationId: get_api_v5_app_experiences_id
      summary: Retrieve an Experience
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Experience, which will look like exp_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppExperience"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
      description: Returns an experience
  "/v5/app/line_items":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: post_api_v5_app_line_items
      summary: Create a Line Item
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppLineItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppLineItemCreateBody"
      description: Create a line item for a company
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: get_api_v5_app_line_items
      summary: List Line Items
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppLineItem"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of line items
  "/v5/app/line_items/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: get_api_v5_app_line_items_id
      summary: Retrieve a Line Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the line item, which will look like li_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppLineItem"
      description: Returns a line item
    delete:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: delete_api_v5_app_line_items_id
      summary: Delete a Line Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the line item, which will look like li_*************
          schema:
            type: string
      responses:
        "204":
          description: A successful response

      description: Deletes a line item
    patch:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: update_api_v5_app_line_items_id
      summary: Update a Line Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the line item, which will look like li_*************
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppLineItemUpdateBody"
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppLineItem"

      description: Updates a line item's metadata field
  "/v5/app/notification_topics":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notification_topics
      operationId: post_api_v5_app_notification_topics
      summary: Create a Notification Topic
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppNotificationTopic"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppNotificationTopicCreateBody"
      description: Create a notification topic for a company
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notification_topics
      operationId: get_api_v5_app_notification_topics
      summary: List Notification Topics
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          required: false
          description: A status to filter by.
          schema:
            type: string
            enum:
              - active
              - inactive
        - name: topic_type
          in: query
          required: false
          description: A topic type to filter by.
          schema:
            type: string
            enum:
              - company
              - user
        - name: send_once
          in: query
          required: false
          description: A boolean to filter by send_once
          schema:
            type: boolean
        - name: notification_channel_identifiers
          in: query
          required: false
          description: An array of notification channel identifiers to filter by.
          schema:
            type: array
            items:
              type: string
              enum:
                - email
                - sms
                - in_app
                - discord_dm
                - mobile
              description: The possible notification channel identifiers.
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppNotificationTopic"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of notification topics
  "/v5/app/notification_topics/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notification_topics
      operationId: get_api_v5_app_notification_topics_id
      summary: Retrieve a Notification Topic
      parameters:
        - name: id
          in: path
          required: true
          description: The topic_identifier of the notification topic, which will be a string.
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppNotificationTopic"
      description: Returns a notification topic
    patch:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notification_topics
      operationId: update_api_v5_app_notification_topics_id
      summary: Update a Notification Topic
      parameters:
        - name: id
          in: path
          required: true
          description: The topic_identifier of the notification topic, which will be a string.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppNotificationTopicUpdateBody"
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppNotificationTopic"
      description: Updates a notification topic
  "/v5/app/memberships":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/memberships
      operationId: get_api_v5_app_memberships
      summary: List Memberships
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: license_key
          in: query
          required: false
          description: A license key to filter by.
          schema:
            type: string
        - name: statuses
          in: query
          required: false
          description: An array of statuses to filter by.
          schema:
            type: array
            items:
              type: string
              enum:
                - active
                - trialing
                - past_due
                - completed
                - canceled
                - expired
                - unresolved
        - name: valid
          in: query
          required: false
          description: A boolean to filter by valid memberships
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppMembership"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of memberships
  "/v5/app/memberships/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/memberships
      operationId: get_api_v5_app_memberships_id
      summary: Retrieve a Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Membership, which will look like mem_*************. This can also be the license key
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppMembership"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a membership
  "/v5/app/notifications":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notifications
      operationId: post_api_v5_app_notifications
      summary: Send a Notification
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      description: Sends a notification to a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationBody"
  "/v5/app/payments":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/payments
      operationId: get_api_v5_app_payments
      summary: List Payments
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: in_app_payments
          in: query
          required: false
          description: A boolean of whether or not to return only payments made with a line item created by the app. If false, returns all payments without a line item.
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppPayment"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of payments
  "/v5/app/payments/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/payments
      operationId: get_api_v5_app_payments_id
      summary: Retrieve a Payment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Payment, which will look like pay_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppPayment"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a payment
  "/v5/app/products":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/products
      operationId: get_api_v5_app_products
      summary: List Products
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppProduct"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of products
  "/v5/app/products/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/products
      operationId: get_api_v5_app_products_id
      summary: Retrieve a Product
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Product, which will look like prod_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppProduct"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a product
  "/v5/app/users/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/users
      operationId: get_api_v5_app_users_id
      summary: Retrieve a User
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the User, which will look like user_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppUser"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a user
  "/v5/app/users/{user_id}/social_accounts":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/users
      operationId: get_api_v5_app_users_id_social_accounts
      summary: List a User's social accounts
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the User, which will look like user_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppSocialAccount"
                additionalProperties: false
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      description: Returns a User's social accounts
  "/v5/company/users/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/users
      operationId: get_api_v5_company_users_id
      summary: Retrieve a User
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the User, which will look like user_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyUser"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a user
  "/v5/company/users/{user_id}/social_accounts":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/users
      operationId: get_api_v5_company_users_id_social_accounts
      summary: List a User's social accounts
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the User, which will look like user_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompanySocialAccount"
                additionalProperties: false
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a User's social accounts
  "/v5/company/billing_items":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/billing_items
      operationId: post_api_v5_company_billing_items
      summary: Create a Billing Item
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyBillingItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyBillingItemCreateBody"
      description: Create a billing item
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/billing_items
      operationId: get_api_v5_company_billing_items
      summary: List Billing Items
      parameters:
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: app_id
          in: query
          required: false
          description: An ID of an app to filter by, which will look like app_*************
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: A status to filter by.
          schema:
            type: string
            enum:
              - active
              - archived
        - name: identifier
          in: query
          required: false
          description: An identifier to filter by.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompanyBillingItem"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of billing items
  "/v5/company/billing_items/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/billing_items
      operationId: get_api_v5_company_billing_items_id
      summary: Retrieve a Billing Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the billing item, which will look like bi_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyBillingItem"
      description: Returns a billing item
    patch:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/billing_items
      operationId: update_api_v5_company_billing_items_id
      summary: Update a Billing Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the billing item, which will look like bi_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyBillingItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyBillingItemUpdateBody"
      description: Updates a billing item
  "/v5/company/memberships":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/memberships
      operationId: get_api_v5_company_memberships
      summary: List Memberships
      parameters:
        - name: statuses
          in: query
          required: false
          description: An array of statuses to filter by.
          schema:
            type: array
            items:
              type: string
              enum:
                - active
                - trialing
                - past_due
                - completed
                - canceled
                - expired
                - unresolved
        - name: valid
          in: query
          required: false
          description: A boolean to filter by valid memberships
          schema:
            type: boolean
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: license_key
          in: query
          required: false
          description: A license key to filter by.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompanyMembership"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of memberships
  "/v5/company/memberships/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/memberships
      operationId: get_api_v5_company_memberships_id
      summary: Retrieve a Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Membership, which will look like mem_*************. This can also be the license key
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyMembership"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a membership
    patch:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/memberships
      operationId: update_api_v5_company_memberships_id
      summary: Update a Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the membership, which will look like mem_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyMembership"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyMembershipUpdateBody"
      description: Updates a membership's metadata
    delete:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/memberships
      operationId: delete_api_v5_company_memberships_id
      summary: Terminate a Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Membership, which will look like mem_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyMembership"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Terminates the membership. No further payments will be made, and the customer will lose access. A terminated membership cannot be reactivated.
  "/v5/company/payments":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/payments
      operationId: get_api_v5_company_payments
      summary: List Payments
      parameters:
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompanyPayment"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of payments
  "/v5/company/payments/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/payments
      operationId: get_api_v5_company_payments_i
